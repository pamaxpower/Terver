"""
Методы построения математической регрессии. Грандиентный спуск
"""
import numpy as np
x = np.array([27,37,42,48,57,56,77,80])             # площадь квартиры
y = np.array([1.2,1.6,1.8,1.8,2.5,2.6,3,3.3])       # стоимость


def mse_(B1, y=y, x=x, n=8):
    """
    B1*x - y-предсказанный
    y - y-истинный
    """
    return np.sum((B1 * x - y)**2) / n


alpha = 1e-6 # скорость обучения: если большой - проскакивает минимум, если маленький - слишком долго по времени

# находим производную по b1, x и y в этом случае выступают в роли констант
# mse = 1 / n * np.sum((B1 * x - y)**2)
# mse = (2 / n) * np.sum((B1 * x - y) * x)

B1 = 0.1
n = 8

for i in range(100000):
    B1 -= alpha * (2 / n) * np.sum((B1 * x - y) * x)
    if i % 5000 == 0:
        print(f'I = {i}, B1 = {B1}, mse={mse_(B1)}')

print(mse_(0.041668))

