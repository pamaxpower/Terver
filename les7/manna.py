"""
Критерий Манна-Уитни
Условия: 
- не соблюдается условие нормальности
- дисперсии в группах различны
- число сравниваемых групп равно 2
- выборки являются независимыми
"""
import numpy as np
import scipy.stats as stats

arr1 = np.array([45,75,90])
arr2 = np.array([58,60,77])

# H0 = m1 = m2
# H1 = m1 != m2, где m1 и m2 - медианы выборок

array = np.concatenate([arr1, arr2])    # объединяем массивы (склейкой) 
sort_array = np.argsort(array)          # сортируем массив (возвращает сортировку по индексам)
"""
np.concatenate() - принимает два массива и возвращем их склейку
np.sort() - принимает массив и сортирует его в порядке возрастания
np.argsort() - принимает массив, сортирует его, и возвращет индексы, 
по которым значения стояли в исходном неотсортированном массиве
"""

# расчет суммы рангов для каждого массива
"""
так как в отсортированном массиве сначала стоят элементы первого списка, 
можно сделать срез по длине этого списка и получить ранги значений первого 
массива. А с помощью функции sum() найти их сумму
"""
rank1 = sort_array[:len(arr1)].sum()
rank2 = sort_array[len(arr1):].sum()
print(rank1, rank2)     # значения отличаются от расчета вручную, потому что у нас ранги начинаются с 0, а не с 1

# расчет U-статистики
n1 = len(arr1)
n2 = len(arr2)
U1 = rank1 - n1 * (n1 + 1) / 2
U2 = rank2 - n2 * (n2 + 1) / 2
U = max(U1, U2)
print(U1, U2)
# определение p-value
p = 2 * (1 - (U / (n1 * n2)))

print("Статистика U = %.2f, p-value = %.3f" % (U, p))

print(stats.mannwhitneyu(arr1, arr2))
